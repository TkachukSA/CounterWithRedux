{"version":3,"sources":["Button.module.css","serviceWorker.ts","Redux/app-redusers.ts","Redux/store.ts","Setting.tsx","CountPage.tsx","Button.tsx","App.tsx","index.tsx","Setting.module.css","CountPage.module.css","App.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","count","Number","localStorage","maxValue","changeMaxValue","changeMinValue","minValue","error","incDisabled","resetDisabled","setSettingsButtonDisabled","rootReducer","combineReducers","app","state","action","type","copy","setItem","toString","store","createStore","Setting","props","className","s","total1","click1","one1","inputRed","input","step","value","onChange","e","currentTarget","valueAsNumber","maxValueFun","minValueFun","CountPage","total","red","yellow","counter","Buttons","one","bottoms","disabled","onClick","execFunc","title","App","useSelector","dispatch","useDispatch","container","click","Button","window1","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.319bec9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottoms\":\"Button_bottoms__1pmkx\",\"bottomsRed\":\"Button_bottomsRed__1n8Su\",\"one\":\"Button_one__3tOQX\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n\n\nexport type setActionType ={\n    type: 'SET'\n}\nexport type incrementActionType = {\n    type: 'INCREMENT'\n}\nexport type resetActionType = {\n    type: 'RESET'\n}\nexport type changeMaxValueActionType = {\n    type: 'MAX_NUMBER_VALUE'\n    maxValue:number\n}\nexport type changeMinValueActionType = {\n    type: 'MIN_NUMBER_VALUE'\n    minValue:number\n}\n\n\n\n\n   export type stateType={\n       count: number\n       changeMaxValue: number\n       changeMinValue: number\n       error: string\n       incDisabled: boolean\n       resetDisabled: boolean\n       setSettingsButtonDisabled: boolean\n\n    }\n\n\nlet initialState:stateType ={\n    count:          Number(localStorage.count)? Number(localStorage.maxValue): 0,\n    changeMaxValue: Number(localStorage.maxValue)? Number(localStorage.maxValue): 0,\n    changeMinValue: Number(localStorage.minValue)? Number(localStorage.minValue): 0,\n    error: \"\",\n    incDisabled:true,\n    resetDisabled:true,\n    setSettingsButtonDisabled: false\n\n}\n\ntype ActionsType = incrementActionType | resetActionType|setActionType|changeMaxValueActionType | changeMinValueActionType\n\nexport const CounterReducer = (state: stateType = initialState, action: ActionsType):stateType => {\n\n    switch (action.type) {\n        case \"INCREMENT\":\n            let copy ={...state}\n            if(copy.count>=copy.changeMaxValue-1){\n                copy.incDisabled=true\n            }\n           copy.setSettingsButtonDisabled=true\n            copy.resetDisabled=false\n            copy.count=copy.count+1\n            return {...copy}\n\n        case \"MAX_NUMBER_VALUE\":{\n            let copy={...state}\n            if(action.maxValue > state.changeMinValue){  //this old value state.count\n                copy.changeMaxValue=action.maxValue\n                copy.setSettingsButtonDisabled=false\n                copy.error='Enter values and press SET'\n                copy.incDisabled=true\n                copy.resetDisabled=true\n            }if (action.maxValue <= state.changeMinValue || state.changeMinValue<0){\n                copy.changeMaxValue=action.maxValue\n                copy.setSettingsButtonDisabled=true\n                copy.error='Incorrect Value!'\n                copy.incDisabled=true\n                copy.resetDisabled=true\n\n            } else {\n                copy.incDisabled=true\n                copy.resetDisabled=true\n            }\n\n            return {...copy}\n        }\n        case \"MIN_NUMBER_VALUE\":{\n            let copy={...state}\n            if (action.minValue<=0 || action.minValue> state.changeMaxValue){\n                copy.error='Incorrect Value!'\n                copy.setSettingsButtonDisabled=true\n                copy.incDisabled=true\n                copy.resetDisabled=true\n                copy.changeMinValue=action.minValue\n            }else {\n                copy.setSettingsButtonDisabled = false\n                copy.setSettingsButtonDisabled=false\n                copy.error = 'Enter values and press SET'\n                copy.incDisabled = true\n                copy.resetDisabled = true\n                copy.changeMinValue = action.minValue\n            }\n\n\n            return copy\n\n        }\n\n        case 'RESET':{\n            //{state.incDisabled=false}\n            return {...state, count: state.changeMinValue, incDisabled: false }\n        }\n        case \"SET\":{\n\n            localStorage.setItem('minValue', state.changeMinValue.toString())\n            localStorage.setItem('maxValue', state.changeMaxValue.toString())\n            localStorage.setItem('count', state.count.toString())\n\n            return {...state,\n            count: state.changeMinValue,\n                setSettingsButtonDisabled: true,\n                incDisabled:false,\n                resetDisabled:false,\n                error:'',\n\n            }\n        }\n\n\n        default:\n            return state\n\n    }\n}\nexport const incrementAS=():incrementActionType=>({type: \"INCREMENT\"})\nexport const resetAS=():resetActionType=>({type: \"RESET\"})\nexport const setAS=():setActionType=>({type: \"SET\"})\nexport const changeMaxValueAS=(maxValue:number):changeMaxValueActionType=>({type: \"MAX_NUMBER_VALUE\", maxValue})\nexport const changeMinValueAS=(minValue:number):changeMinValueActionType=>({type: \"MIN_NUMBER_VALUE\", minValue})","\nimport {combineReducers, createStore} from 'redux';\nimport {CounterReducer} from \"./app-redusers\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    app: CounterReducer,\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./Setting.module.css\"\r\n\r\ntype TotalT = {\r\n    error: string\r\n    count: number\r\n    changeMinValue: number\r\n    changeMaxValue: number\r\n    maxValueFun: (maxValue: number) => void\r\n    minValueFun: (minValue: number) => void\r\n}\r\n\r\nfunction Setting(props: TotalT) {\r\n\r\n\r\n    const changeNumber = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.currentTarget.valueAsNumber\r\n        props.maxValueFun(value)\r\n\r\n    }\r\n    const changeNumberStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = Number(e.currentTarget.value)\r\n        props.minValueFun(value)\r\n    }\r\n\r\n\r\n\r\n    return (<div className={s.total1}>\r\n        <div className={s.click1}>\r\n            <div className={s.one1}>max value\r\n                <input type=\"number\"\r\n                       className={props.error === 'Incorrect Value!' ? s.inputRed : s.input}\r\n                       step={1}\r\n                       value={props.changeMaxValue}\r\n                       onChange={changeNumber}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.one1}>min value <input type=\"number\"\r\n                                                     className={props.error === 'Incorrect Value!' ? s.inputRed : s.input}\r\n                                                     step={1}\r\n                                                     value={props.changeMinValue}\r\n                                                     onChange={changeNumberStart}\r\n\r\n            /></div>\r\n\r\n\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Setting;\r\n","import s from \"./CountPage.module.css\"\r\n\r\ntype TotalT = {\r\n    counter: number\r\n    changeMinValue: number\r\n    changeMaxValue: number\r\n    error: string\r\n}\r\n\r\nfunction CountPage(props: TotalT) {\r\n\r\n\r\n    return (<div className={s.total}>\r\n\r\n        {\r\n            props.error\r\n                ? <h3 className={props.error === 'Incorrect Value!'\r\n                    ? s.red\r\n                    : s.yellow}>\r\n                    {props.error}\r\n                  </h3>\r\n            : <h2 className={props.counter === props.changeMaxValue ? s.red : s.yellow}>{props.counter}</h2>\r\n        }\r\n\r\n    </div>);\r\n}\r\n\r\nexport default CountPage;\r\n","import React from 'react';\r\nimport s from \"./Button.module.css\"\r\n\r\ntype BottomsType={\r\n    title: string\r\n    disabled: boolean\r\n    execFunc: ()=> void\r\n}\r\n\r\nfunction Buttons(props: BottomsType) {\r\n\r\n    return (\r\n        <div className={s.one}>\r\n\r\n\r\n            <button className={s.bottoms}\r\n                    disabled={props.disabled}\r\n                    onClick={()=>{props.execFunc()}}\r\n            >\r\n                {props.title}\r\n            </button>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport s from \"./App.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./Redux/store\";\r\nimport {changeMaxValueAS, changeMinValueAS, incrementAS, resetAS, setAS, stateType} from \"./Redux/app-redusers\";\r\nimport Setting from \"./Setting\";\r\nimport CountPage from \"./CountPage\";\r\nimport Buttons from \"./Button\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const {\r\n        count,\r\n        changeMaxValue,\r\n        changeMinValue,\r\n        error,\r\n        incDisabled,\r\n        resetDisabled,\r\n        setSettingsButtonDisabled\r\n    } = useSelector<AppRootStateType, stateType>(state => state.app)\r\n    let dispatch = useDispatch()\r\n\r\n\r\n    const inc = () => {\r\n        dispatch(incrementAS())\r\n    }\r\n    const maxValueFun = (value: number) => {\r\n        dispatch(changeMaxValueAS(value))\r\n    }\r\n    const minValueFun = (value: number) => {\r\n        dispatch(changeMinValueAS(value))\r\n    }\r\n    const reset = () => {\r\n        dispatch(resetAS())\r\n    }\r\n\r\n    const handleSet = () => {\r\n        dispatch(setAS())\r\n    }\r\n\r\n    return <div className={s.container}>\r\n\r\n        <div className={s.window}>\r\n            <CountPage counter={count}\r\n                       error={error}\r\n                       changeMinValue={changeMinValue}\r\n                       changeMaxValue={changeMaxValue}/>\r\n            <div className={s.click}>\r\n                <Buttons disabled={incDisabled} title={'inc'} execFunc={inc}/>\r\n                <Buttons disabled={resetDisabled} title={'reset'} execFunc={reset}/>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div className={s.window1}>\r\n            <Setting count={count}\r\n                     error={error}\r\n                     changeMinValue={changeMinValue}\r\n                     changeMaxValue={changeMaxValue}\r\n                     maxValueFun={maxValueFun}\r\n                     minValueFun={minValueFun}\r\n            />\r\n\r\n            <div>\r\n                <Buttons disabled={setSettingsButtonDisabled} title={'set'} execFunc={handleSet}/>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"one1\":\"Setting_one1__sFp0Y\",\"click1\":\"Setting_click1__xgFD5\",\"total1\":\"Setting_total1__12FOY\",\"inputRed\":\"Setting_inputRed__3Tnww\",\"input\":\"Setting_input__6yYD2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"CountPage_red__2oFLM\",\"yellow\":\"CountPage_yellow__24FIj\",\"total\":\"CountPage_total__2yWRL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"container\":\"App_container__1MQN3\",\"window\":\"App_window__35LVr\",\"click\":\"App_click__2nujX\",\"window1\":\"App_window1__3VoF2\"};"],"sourceRoot":""}